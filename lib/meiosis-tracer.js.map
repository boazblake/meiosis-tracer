{"version":3,"sources":["webpack://meiosisTracer/webpack/bootstrap","webpack://meiosisTracer/./src/index.js","webpack://meiosisTracer/./src/meiosis-tracer.js","webpack://meiosisTracer/./src/model.js","webpack://meiosisTracer/./src/view.js","webpack://meiosisTracer/./src/receive.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_meiosisTracer","meiosisTracer","_model","_view","_receive","trace","params","update","dataStreams","Error","window","toJS","model","JSON","parse","stringify","fromJS","toUpdate","bufferedValues","bufferedStreamValues","devtoolInitialized","sendValues","liveChange","lastStream","length","otherStreamIds","otherStreamsById","otherStreams","forEach","otherStream","streamId","Date","getTime","push","map","data","type","postMessage","addEventListener","evt","sendValuesBack","streamIds","values","stream","selector","renderModel","triggerStreamValue","horizontal","rows","cols","document","querySelector","accumulateHistory","receiveValues","createReceiveValues","tracerModel","createTracerView","initialView","initStreamIdModel","streams","index","initStreamIds","receiveStreamValue","streamState","updateStreamValue","reset","tracerStates","tracerIndex","errorMessage","divStyle","setAccumulateHistory","tracerView","tracer","getElementById","setAttribute","String","disabled","innerHTML","querySelectorAll","streamValueDivsMarkup","streamTextareas","onSliderChange","parseInt","target","snapshot","container","textarea","getElementsByTagName","input","div","irows","arguments","undefined","icols","viewHtml","tracerContainer","button","style","display","onToggle","onReset","Math","max","min","err","onRefresh","setter","streamModel","onStreamSliderChange","onStreamValueChange","view"],"mappings":"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","file":"meiosis-tracer.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { meiosisTracer } from \"./meiosis-tracer\"\n\n/*\n1. Live change\n- receive values from meiosis with update=true. This will add to the tracer's history\n  and increase the slider max.\n- re-render the tracer view with update=true.\n\n2. Time-travel change\n- send MEIOSIS_RENDER_MODEL with sendValuesBack=false\n- we already have the values in the snapshot, so don't need anything back\n- re-render the tracer view with update=false.\n\n3. Typing in model textarea\n- send MEIOSIS_RENDER_MODEL with sendValuesBack=true. The tracer needs to get\n  the computed values from the other streams.\n- receive values from meiosis with update=false so this will not add to the tracer's history.\n- re-render the tracer view with update=false.\n*/\n\nmodule.exports = meiosisTracer\n","import { tracerModel } from \"./model\"\nimport { initialView, createTracerView, initStreamIds, updateStreamValue, reset } from \"./view\"\nimport { createReceiveValues } from \"./receive\"\n\nwindow[\"__MEIOSIS_TRACER_GLOBAL_HOOK__\"] = true\n\nfunction isMeiosisTracerOn() {\n  return window && window[\"__MEIOSIS_TRACER_GLOBAL_HOOK__\"]\n}\n\n/*\n  update: Stream<any>\n  dataStreams: Array<Stream<any>>\n  otherStreams?: Array<Stream<any>>\n  toJS?: Function\n  fromJS?: Function\n  toUpdate?: Function\n*/\nfunction trace(params) {\n  if (!params.update || !params.dataStreams) {\n    throw new Error(\"Please specify update and dataStreams.\")\n  }\n\n  /*\n  Any change to lastStream automatically re-renders the view.\n\n  \"Live\" changes are changes to the update stream.\n\n  Keep track of the date of the last live change with the liveChange date.\n\n  1. Live change\n  - update the liveChange date\n  - since liveChange !== lastChange, update=true\n  - set lastChange = liveChange\n  - send values to tracer with update=true. This will add to the tracer's history\n    and increase the slider max.\n\n  2. Time-travel change\n  - receive MEIOSIS_RENDER_MODEL with sendValuesBack=false\n  - send the data to the first stream, which then goes thru all streams\n  - the view automatically re-renders\n  - since liveChange === lastChange, update=false\n  - don't send anything back to the tracer.\n\n  3. Typing in model textarea\n  - receive MEIOSIS_RENDER_MODEL with sendValuesBack=true. The tracer needs to be\n    sent the computed values from the other streams.\n  - send the data to the first stream, which then goes thru all streams\n  - the view automatically re-renders\n  - since liveChange === lastChange, update=false\n  - since sendValuesBack=true, send the values to the tracer. But, update=false so\n    this will not add to the tracer's history.\n\n  4. Changes in otherStreams\n  - initially send the ids of the streams\n  - send new values with ids\n  */\n\n  if (isMeiosisTracerOn()) {\n    const toJS = params.toJS || (model => JSON.parse(JSON.stringify(model)))\n    const fromJS = params.fromJS || (model => model)\n    const toUpdate = params.toUpdate || (model => () => model)\n    const bufferedValues = []\n    const bufferedStreamValues = []\n    let devtoolInitialized = false\n    let sendValues = true\n\n    let liveChange = true\n\n    const lastStream = params.dataStreams[params.dataStreams.length - 1]\n\n    const otherStreamIds = []\n    const otherStreamsById = {}\n\n    if (params.otherStreams && params.otherStreams.length) {\n      params.otherStreams.forEach(otherStream => {\n        const streamId = \"stream_\" + new Date().getTime()\n        otherStreamIds.push(streamId)\n        otherStreamsById[streamId] = otherStream\n\n        otherStream.map(value => {\n          const data = { type: \"MEIOSIS_STREAM_VALUE\", value, streamId }\n\n          if (devtoolInitialized) {\n            window.postMessage(data, \"*\")\n          }\n          else {\n            bufferedStreamValues.push(data)\n          }\n        })\n      })\n    }\n\n    window.addEventListener(\"message\", evt => {\n      if (evt.data.type === \"MEIOSIS_RENDER_MODEL\") {\n        sendValues = evt.data.sendValuesBack\n        liveChange = false\n        params.update(toUpdate(fromJS(evt.data.model)))\n      }\n      else if (evt.data.type === \"MEIOSIS_TRACER_INIT\") {\n        devtoolInitialized = true\n\n        if (otherStreamIds.length > 0) {\n          window.postMessage({ type: \"MEIOSIS_STREAM_IDS\", streamIds: otherStreamIds }, \"*\")\n        }\n        bufferedValues.forEach(values =>\n          window.postMessage({ type: \"MEIOSIS_VALUES\", values, update: true }, \"*\"))\n        bufferedStreamValues.forEach(data => window.postMessage(data, \"*\"))\n      }\n      else if (evt.data.type === \"MEIOSIS_TRIGGER_STREAM_VALUE\") {\n        const streamId = evt.data.streamId\n        const value = evt.data.value\n\n        otherStreamsById[streamId](value)\n      }\n    })\n\n    lastStream.map(() => {\n      if (sendValues || liveChange) {\n        const values = params.dataStreams.map(stream =>\n          ({ value: toJS(stream()) }))\n\n        if (devtoolInitialized) {\n          window.postMessage({ type: \"MEIOSIS_VALUES\", values, update: true }, \"*\")\n        }\n        else {\n          bufferedValues.push(values)\n        }\n      }\n      liveChange = true\n    })\n\n    // Send ping in case tracer was already loaded.\n    window.postMessage({ type: \"MEIOSIS_PING\" }, \"*\")\n  }\n}\n\nconst meiosisTracer = params => {\n  trace(params)\n\n  let { selector, renderModel, triggerStreamValue, horizontal, rows, cols } = params\n\n  const target = document.querySelector(selector)\n\n  if (!target) {\n    return\n  }\n\n  let accumulateHistory = true\n\n  const receiveValues = createReceiveValues(tracerModel, createTracerView(value => {\n    accumulateHistory = value\n  }))\n\n  renderModel = renderModel || ((model, sendValuesBack) =>\n    window.postMessage({ type: \"MEIOSIS_RENDER_MODEL\", model, sendValuesBack }, \"*\"))\n\n  initialView(selector, tracerModel, renderModel, horizontal, rows, cols)\n\n  triggerStreamValue = triggerStreamValue || ((streamId, value) =>\n    window.postMessage({ type: \"MEIOSIS_TRIGGER_STREAM_VALUE\", streamId, value }, \"*\"))\n\n  const initStreamIdModel = (streamIds) => {\n    streamIds.forEach(streamId =>\n      tracerModel.streams[streamId] = { index: 0, values: [] }\n    )\n    initStreamIds(streamIds, tracerModel.streams, triggerStreamValue, rows, cols)\n  }\n\n  const receiveStreamValue = (streamId, value) => {\n    const streamState = tracerModel.streams[streamId]\n\n    streamState.values.push(value)\n    streamState.index = streamState.values.length - 1\n\n    updateStreamValue(streamId, streamState)\n  }\n\n  window.addEventListener(\"message\", evt => {\n    if (evt.data.type === \"MEIOSIS_VALUES\") {\n      receiveValues(evt.data.values, accumulateHistory && evt.data.update)\n    }\n    else if (evt.data.type === \"MEIOSIS_STREAM_IDS\") {\n      const streamIds = evt.data.streamIds\n      initStreamIdModel(streamIds)\n    }\n    else if (evt.data.type === \"MEIOSIS_STREAM_VALUE\") {\n      receiveStreamValue(evt.data.streamId, evt.data.value)\n    }\n  })\n\n  window.postMessage({ type: \"MEIOSIS_TRACER_INIT\" }, \"*\")\n\n  return {\n    receiveValues,\n    initStreamIdModel,\n    receiveStreamValue,\n    reset: () => reset(tracerModel)\n  }\n}\n\nexport { meiosisTracer }\n","const tracerModel = {\n  tracerStates: [],\n  tracerIndex: 0,\n  streams: { } // id: { index: N, values: [] }\n}\n\nexport { tracerModel }\n","const tracerContainerId = \"tracerContainer\"\nconst dataStreamContainerId = \"dataStreamContainer\"\nconst otherStreamContainerId = \"otherStreamContainer\"\nconst tracerId = \"tracerSlider\"\nconst tracerToggleId = \"tracerToggle\"\nconst tracerResetId = \"tracerReset\"\nconst tracerIndexId = \"tracerIndex\"\nconst tracerStepBackId = \"tracerStepBack\"\nconst tracerStepForwardId = \"tracerStepForward\"\nconst tracerAccumulHistoryId = \"tracerAccumulHistory\"\nconst tracerRefreshViewId = \"tracerRefreshView\"\nconst tracerModelId = \"tracerModel\"\nconst errorMessageId = \"errorMessage\"\nlet errorMessage = null\nlet divStyle = null\nlet rows = 0\nlet cols = 0\nlet setAccumulateHistory = null\nlet accumulateHistory = true\n\nconst createTracerView = setter => {\n  setAccumulateHistory = setter\n  return tracerView\n}\n\nconst tracerView = (values, tracerModel) => {\n  const tracer = document.getElementById(tracerId)\n  tracer.setAttribute(\"max\", String(tracerModel.tracerStates.length - 1))\n  tracer.value = String(tracerModel.tracerIndex)\n  document.getElementById(tracerStepBackId).disabled = (tracerModel.tracerIndex === 0)\n  document.getElementById(tracerStepForwardId).disabled =\n    (tracerModel.tracerIndex === (tracerModel.tracerStates.length - 1))\n\n  const tracerIndex = document.getElementById(tracerIndexId)\n  tracerIndex.innerHTML = String(tracerModel.tracerIndex)\n\n  const tracerModelEl = document.getElementById(tracerModelId)\n  tracerModelEl.value = JSON.stringify(values[0].value, null, 4)\n\n  var streamValueDivs = document.querySelectorAll(\"div.dataStream\")\n\n  if (streamValueDivs.length === 0) {\n    var streamValueDivsMarkup = \"\"\n\n    for (var i = 1, t = values.length; i < t; i++) {\n      streamValueDivsMarkup +=\n        \"<div\" + divStyle + \" class='dataStream'>\" +\n          \"<textarea rows='\" + rows + \"' cols='\" + cols + \"'></textarea>\" +\n        \"</div>\"\n    }\n    document.getElementById(dataStreamContainerId).innerHTML = streamValueDivsMarkup\n  }\n\n  var streamTextareas = document.querySelectorAll(\"div.dataStream textarea\")\n\n  for (i = 1, t = values.length; i < t; i++) {\n    streamTextareas[i - 1].value = JSON.stringify(values[i].value, null, 4)\n  }\n}\n\nconst onRefresh = renderModel => {\n  try {\n    const value = document.getElementById(tracerModelId).value\n    const model = JSON.parse(value)\n    renderModel(model, true)\n    errorMessage.style.display = \"none\"\n  }\n  catch (err) {\n    errorMessage.style.display = \"block\"\n  }\n}\n\nconst onSliderChange = (renderModel, tracerModel) => evt => {\n  const index = parseInt(evt.target.value, 10)\n  const snapshot = tracerModel.tracerStates[index]\n  tracerModel.tracerIndex = index\n  const model = snapshot[0].value\n  renderModel(model, false)\n  tracerView(snapshot, tracerModel)\n}\n\nconst onStreamSliderChange = (streamModel, streamId) => evt => {\n  const streamState = streamModel[streamId]\n  const index = parseInt(evt.target.value, 10)\n\n  streamState.index = index\n\n  updateStreamValue(streamId, streamState)\n}\n\nconst onStreamValueChange = (streamId, textarea, triggerStreamValue) => () => {\n  try {\n    const value = JSON.parse(textarea.value)\n    triggerStreamValue(streamId, value)\n    errorMessage.style.display = \"none\"\n  }\n  catch (err) {\n    errorMessage.style.display = \"block\"\n  }\n}\n\nconst onToggle = tracerContainer => evt => {\n  const button = evt.target\n\n  if (tracerContainer.style.display === \"none\") {\n    tracerContainer.style.display = \"block\"\n    button.innerHTML = \"Hide\"\n  }\n  else {\n    tracerContainer.style.display = \"none\"\n    button.innerHTML = \"Show\"\n  }\n}\n\nconst onReset = tracerModel => () => {\n  reset(tracerModel)\n}\n\nconst reset = (tracerModel) => {\n  const snapshot = tracerModel.tracerStates[0]\n  tracerModel.tracerStates.length = 0\n  tracerModel.tracerIndex = 0\n  tracerView(snapshot, tracerModel)\n}\n\nconst initialView = (selector, tracerModel, renderModel, horizontal, irows=5, icols=40) => {\n  const target = document.querySelector(selector)\n  rows = irows\n  cols = icols\n\n  if (target) {\n    divStyle = horizontal ? \" style='float: left'\" : \"\"\n\n    const viewHtml =\n      \"<div style='text-align: right'><button id='\" + tracerToggleId + \"'>Hide</button></div>\" +\n      \"<div id='\" + tracerContainerId + \"'>\" +\n        \"<div style='text-align: right'><button id='\" + tracerResetId + \"'>Reset</button></div>\" +\n        \"<div>Data streams:</div>\" +\n        \"<input id='\" + tracerId + \"' type='range' min='0' max='\" +\n          String(tracerModel.tracerStates.length - 1) +\n          \"' value='\" + String(tracerModel.tracerIndex) + \"' style='width: 100%'/>\" +\n        \"<button id='\" + tracerStepBackId + \"'>&lt</button> <button id='\" + tracerStepForwardId + \"'>&gt</button> \" +\n        \"<span id='\" + tracerIndexId + \"'>\" + String(tracerModel.tracerIndex) + \"</span>\" +\n        \"<label><input style='margin-left: 16px' type='checkbox' id='\" + tracerAccumulHistoryId + \"' checked/>Accumulate history</label>\" +\n        \"<div\" + divStyle + \">\" +\n          \"<div>\" +\n            \"<span>Model: (type into this box) </span>\" +\n            \"<button style='margin-bottom: 4px' id='\" + tracerRefreshViewId + \"'>Refresh view</button>\" +\n          \"</div>\" +\n          \"<textarea id='\" + tracerModelId + \"' rows='\" + rows + \"' cols='\" + cols + \"'></textarea>\" +\n          \"<div id='\" + errorMessageId + \"' style='display: none'><span style='color:red'>Invalid JSON</span></div>\" +\n        \"</div>\" +\n        \"<span id='\" + dataStreamContainerId + \"'></span>\" +\n        \"<span id='\" + otherStreamContainerId + \"'></span>\" +\n      \"</div>\"\n\n    target.innerHTML = viewHtml\n\n    const tracerContainer = document.getElementById(tracerContainerId)\n    errorMessage = document.getElementById(errorMessageId)\n\n    document.getElementById(tracerId).addEventListener(\"input\", onSliderChange(renderModel, tracerModel))\n    document.getElementById(tracerToggleId).addEventListener(\"click\", onToggle(tracerContainer))\n    document.getElementById(tracerResetId).addEventListener(\"click\", onReset(tracerModel))\n    document.getElementById(tracerStepBackId).addEventListener(\"click\", function() {\n      onSliderChange(renderModel, tracerModel)(\n        { target: { value: Math.max(0, tracerModel.tracerIndex - 1) }})\n    })\n    document.getElementById(tracerStepForwardId).addEventListener(\"click\", function() {\n      onSliderChange(renderModel, tracerModel)(\n        { target: { value: Math.min(tracerModel.tracerStates.length - 1, tracerModel.tracerIndex + 1) }})\n    })\n    document.getElementById(tracerRefreshViewId).addEventListener(\"click\", function() {\n      onRefresh(renderModel)\n    })\n    document.getElementById(tracerAccumulHistoryId).addEventListener(\"change\", function() {\n      accumulateHistory = !accumulateHistory\n      setAccumulateHistory(accumulateHistory)\n    })\n  }\n}\n\nconst initStreamIds = (streamIds, streamModel, triggerStreamValue, rows=5, cols=40) => {\n  var streamValueDivsMarkup = \"<div>Other streams:</div>\"\n\n  streamIds.forEach(streamId =>\n    streamValueDivsMarkup +=\n      \"<div\" + divStyle + \" class='otherStream' id='\" + streamId + \"'>\" +\n        \"<input type='range' min='0' max='0' value='0' style='width: 100%'/>\" +\n        \"<div>0</div>\" +\n        \"<textarea rows='\" + rows + \"' cols='\" + cols + \"'></textarea>\" +\n        \"<div><button>Trigger</button></div>\" +\n      \"</div>\"\n  )\n  document.getElementById(otherStreamContainerId).innerHTML = streamValueDivsMarkup\n\n  streamIds.forEach(streamId => {\n    const container = document.getElementById(streamId)\n\n    const input = container.getElementsByTagName(\"input\")[0]\n    input.addEventListener(\"input\", onStreamSliderChange(streamModel, streamId))\n\n    const button = container.getElementsByTagName(\"button\")[0]\n    const textarea = container.getElementsByTagName(\"textarea\")[0]\n    button.addEventListener(\"click\", onStreamValueChange(streamId, textarea, triggerStreamValue))\n  })\n}\n\nconst updateStreamValue = (streamId, streamState) => {\n  const container = document.getElementById(streamId)\n  const textarea = container.getElementsByTagName(\"textarea\")[0]\n  const input = container.getElementsByTagName(\"input\")[0]\n  const div = container.getElementsByTagName(\"div\")[0]\n\n  textarea.value = JSON.stringify(streamState.values[streamState.index], null, 4)\n  input.setAttribute(\"max\", String(streamState.values.length - 1))\n  input.value = String(streamState.index)\n  div.innerHTML = String(streamState.index)\n}\n\nexport { initialView, createTracerView, reset, initStreamIds, updateStreamValue }\n","const createReceiveValues = (tracerModel, view) => (values, update) => {\n  if (update) {\n    if (tracerModel.tracerStates.length > 0) {\n      tracerModel.tracerStates.length = tracerModel.tracerIndex + 1\n    }\n    tracerModel.tracerStates.push(values)\n    tracerModel.tracerIndex = tracerModel.tracerStates.length - 1\n  }\n  view(values, tracerModel)\n}\n\nexport { createReceiveValues }\n"],"sourceRoot":""}